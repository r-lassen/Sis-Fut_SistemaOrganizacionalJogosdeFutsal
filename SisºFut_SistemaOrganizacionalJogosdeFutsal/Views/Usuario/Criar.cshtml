@model UsuarioModel
@using SisºFut_SistemaOrganizacionalJogosdeFutsal.Enums




<!-- SEÇÃO DE MENSAGENS DE ALERTA -->
@if (TempData["MensagemSucesso"] != null)
{
    <div id="alertSucesso" class="alert alert-success text-center" role="alert">
        @TempData["MensagemSucesso"]
    </div>
}

@if (TempData["MensagemErro"] != null)
{
    <div id="alertErro" class="alert alert-danger text-center" role="alert">
        @TempData["MensagemErro"]
    </div>
}



<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<link rel="stylesheet" href="~/css/CriarUsuario.css" asp-append-version="true">

<div class="main-container">

    <div class="page-title">
        <h1>Cadastrar Usuário</h1>
    </div>

    <form asp-controller="Usuario" asp-action="Criar" method="post" id="cadastroForm">
        <div class="form-container">
            <!-- Nome do Time -->
            <div class="row mb-4">
                <div class="col-12">
                    <label class="form-label required-field">Nome do Time</label>
                    <input type="text" asp-for="Name"
                           class="form-control @(ViewData.ModelState["Name"]?.Errors.Count > 0 ? "is-invalid" : ViewData.ModelState["Name"]?.AttemptedValue != null ? "is-valid" : "")"
                           placeholder="Digite o Nome" required />
                    <span class="text-danger">@Html.ValidationMessageFor(x => x.Name)</span>
                </div>
            </div>

            <!-- E-mail -->
            <div class="row mb-4">
                <div class="col-12">
                    <label class="form-label required-field">E-mail</label>
                    <input type="email" asp-for="Email"
                           class="form-control @(ViewData.ModelState["Email"]?.Errors.Count > 0 ? "is-invalid" : ViewData.ModelState["Email"]?.AttemptedValue != null ? "is-valid" : "")"
                           placeholder="Digite o Email" required />
                    <span class="text-danger">@Html.ValidationMessageFor(x => x.Email)</span>
                </div>
            </div>

            <!-- Login e Perfil -->
            <div class="row mb-4">
                <div class="col-md-6 mb-3 mb-md-0">
                    <label class="form-label required-field">Usuário</label>
                    <input type="text" asp-for="Login"
                           class="form-control @(ViewData.ModelState["Login"]?.Errors.Count > 0 ? "is-invalid" : ViewData.ModelState["Login"]?.AttemptedValue != null ? "is-valid" : "")"
                           placeholder="Usuário" required />
                    <span class="text-danger">@Html.ValidationMessageFor(x => x.Login)</span>
                </div>
                <div class="col-md-6">
                    <label class="form-label required-field">Tipo de Perfil</label>
                    @Html.DropDownListFor(model => model.Perfil,
                             new SelectList(Enum.GetValues(typeof(PerfilEnum))),
                             "Selecione",
                             new
                             {
                                 @class = "form-control",
                                 @id = "dropdownPerfil",
                                 @required = "required"
                             })
                    <span class="text-danger">@Html.ValidationMessageFor(x => x.Perfil)</span>
                </div>
            </div>

            <!-- Senha -->
            <div class="row mb-4 position-relative">
                <div class="col-12">
                    <label class="form-label required-field">Senha</label>
                    <div class="position-relative">
                        <input type="password" asp-for="Senha" id="senha"
                               class="form-control @(ViewData.ModelState["Senha"]?.Errors.Count > 0 ? "is-invalid" : ViewData.ModelState["Senha"]?.AttemptedValue != null ? "is-valid" : "")"
                               placeholder="Digite uma Senha" required />
                        <i id="toggleSenha" class="bi bi-eye position-absolute text-muted d-none"
                           style="top: 55%; right: 45px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                    </div>
                    <span class="text-danger">@Html.ValidationMessageFor(x => x.Senha)</span>

                    <small id="capsWarning" class="text-warning d-none mt-1 d-block">
                        <i class="bi bi-capslock-fill"></i> Caps Lock está ativado!
                    </small>
                    <small id="senhaAviso" class="text-danger d-none mt-1 d-block">
                        A senha deve ter no mínimo 6 caracteres, sem espaços ou caracteres especiais.
                    </small>

                    <div id="senhaForca" class="mt-2">
                        <div class="progress" style="height: 6px;">
                            <div id="barraForca" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Confirmação de Senha -->
            <div class="row mb-4 position-relative">
                <div class="col-12">
                    <label class="form-label required-field">Confirmação de Senha</label>
                    <div class="position-relative">
                        <input type="password" id="confirmacaoSenha"
                               class="form-control"
                               placeholder="Confirme a Senha" required />
                        <i id="toggleConfirmacao" class="bi bi-eye position-absolute text-muted d-none"
                           style="top: 55%; right: 45px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                    </div>
                    <small id="feedbackConfirmacao" class="text-danger d-none mt-1">
                        <i class="bi bi-exclamation-triangle-fill"></i> As senhas não coincidem.
                    </small>
                </div>
            </div>

            <!-- Botões -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="btn-group">
                        <a class="btn btn-outline" asp-controller="Usuario" asp-action="Index">Voltar</a>
                        <button type="submit" class="btn btn-cadastrar">Cadastrar</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Validação de confirmação de senha
        const senha = document.getElementById('senha');
        const confirmacaoSenha = document.getElementById('confirmacaoSenha');
        const feedbackConfirmacao = document.getElementById('feedbackConfirmacao');

        if (senha && confirmacaoSenha) {
            function validarSenha() {
                if (senha.value !== confirmacaoSenha.value) {
                    confirmacaoSenha.setCustomValidity("As senhas não coincidem");
                    confirmacaoSenha.classList.add('is-invalid');
                    feedbackConfirmacao.classList.remove('d-none');
                } else {
                    confirmacaoSenha.setCustomValidity("");
                    confirmacaoSenha.classList.remove('is-invalid');
                    feedbackConfirmacao.classList.add('d-none');
                }
            }

            senha.addEventListener('change', validarSenha);
            confirmacaoSenha.addEventListener('keyup', validarSenha);
        }

        // Mostrar/ocultar senha
        function configurarToggleSenha(inputId, toggleId) {
            const input = document.getElementById(inputId);
            const toggle = document.getElementById(toggleId);

            if (input && toggle) {
                toggle.addEventListener('click', function () {
                    const tipoAtual = input.getAttribute('type');
                    input.setAttribute('type', tipoAtual === 'password' ? 'text' : 'password');
                    toggle.classList.toggle('bi-eye');
                    toggle.classList.toggle('bi-eye-slash');
                });

                input.addEventListener('input', function () {
                    if (input.value.trim().length > 0) {
                        toggle.classList.remove('d-none');
                    } else {
                        toggle.classList.add('d-none');
                        input.setAttribute('type', 'password');
                        toggle.classList.remove('bi-eye-slash');
                        toggle.classList.add('bi-eye');
                    }
                });
            }
        }

        configurarToggleSenha('senha', 'toggleSenha');
        configurarToggleSenha('confirmacaoSenha', 'toggleConfirmacao');

        // Validação do formulário com TRIM automático
        const form = document.getElementById('cadastroForm');
        if (form) {
            form.addEventListener('submit', function (event) {
                form.querySelectorAll('input').forEach(input => {
                    const t = input.type;
                    if ((t === 'text' || t === 'email' || t === 'password') && input.value) {
                        input.value = input.value.trim();
                    }
                });

                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        }

        // Verificação de Caps Lock
        const capsWarning = document.getElementById('capsWarning');
        const senhaAviso = document.getElementById('senhaAviso');
        const barraForca = document.getElementById('barraForca');

        if (senha) {
            function verificarCapsLock(e) {
                const caps = e.getModifierState && e.getModifierState('CapsLock');
                capsWarning.classList.toggle('d-none', !caps);
            }

            function validarConteudoSenha() {
                const valor = senha.value;
                const regex = /^[A-Za-z0-9]{6,}$/;

                if (!regex.test(valor)) {
                    senha.setCustomValidity("Senha inválida");
                    senha.classList.add('is-invalid');
                    senhaAviso.classList.remove('d-none');
                } else {
                    senha.setCustomValidity("");
                    senha.classList.remove('is-invalid');
                    senhaAviso.classList.add('d-none');
                }

                // Medidor de força
                let forca = 0;
                if (valor.length >= 6) forca += 1;
                if (/[A-Z]/.test(valor)) forca += 1;
                if (/[0-9]/.test(valor)) forca += 1;

                let largura = (forca / 3) * 100;
                barraForca.style.width = `${largura}%`;

                barraForca.className = 'progress-bar';
                if (forca === 1) barraForca.classList.add('bg-danger');
                else if (forca === 2) barraForca.classList.add('bg-warning');
                else if (forca === 3) barraForca.classList.add('bg-success');
            }

            senha.addEventListener('input', validarConteudoSenha);
            senha.addEventListener('keyup', verificarCapsLock);
            senha.addEventListener('focus', verificarCapsLock);
        }
    });

            // Desaparecer automaticamente os alertas
    const alertSucesso = document.getElementById('alertSucesso');
    const alertErro = document.getElementById('alertErro');

    if (alertSucesso) {
        setTimeout(() => {
            alertSucesso.style.transition = "opacity 0.5s ease";
            alertSucesso.style.opacity = "0";
            setTimeout(() => {
                alertSucesso.style.display = "none";
            }, 500);
        }, 8000); // 8 segundos
    }

    if (alertErro) {
        setTimeout(() => {
            alertErro.style.transition = "opacity 0.5s ease";
            alertErro.style.opacity = "0";
            setTimeout(() => {
                alertErro.style.display = "none";
            }, 500);
        }, 15000); // 15 segundos
    }
</script>