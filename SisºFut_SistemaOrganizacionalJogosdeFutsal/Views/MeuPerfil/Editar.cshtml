@model HomeModel
@{
    ViewData["Title"] = "Editar Usuario";
    Layout = "_Layout";
}

<!-- SEÇÃO DE MENSAGENS DE ALERTA -->
@if (TempData["MensagemSucesso"] != null)
{
    <div id="alertSucesso" class="alert alert-success text-center" role="alert">
        @TempData["MensagemSucesso"]
    </div>
}

@if (TempData["MensagemErro"] != null)
{
    <div id="alertErro" class="alert alert-danger text-center" role="alert">
        @TempData["MensagemErro"]
    </div>
}

@using SisºFut_SistemaOrganizacionalJogosdeFutsal.Enums

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
<link rel="stylesheet" href="~/css/EditarPerfil.css" asp-append-version="true">

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6">

            <h1 class="form-title" style="font-weight: bold;">Editar Usuário</h1>

            <div class="form-card">
                <form asp-controller="MeuPerfil" asp-action="Editar" method="post" enctype="multipart/form-data" id="cadastroForm">
                    <div class="form-body">
                        @Html.HiddenFor(m => m.Id)
                        @Html.HiddenFor(m => m.Usuario.Id)
                        @Html.HiddenFor(m => m.Usuario.DataCadastro)
                        @Html.HiddenFor(m => m.Usuario.DataAtualização)
                        @Html.HiddenFor(m => m.Usuario.Foto)
                        @Html.HiddenFor(m => m.Usuario.Senha)
                        @Html.HiddenFor(m => m.Usuario.Perfil)

                        <!-- Foto do Time -->
                        <div class="mb-3">
                            <label class="form-label">Foto do Time</label>
                            <input type="file" asp-for="Usuario.FotoArquivo"
                                   class="form-control @(ViewData.ModelState["Usuario.FotoArquivo"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                   accept="image/*" />
                            <span class="text-danger">@Html.ValidationMessageFor(x => x.Usuario.FotoArquivo)</span>
                        </div>

                        <!-- Nome -->
                        <div class="mb-3">
                            <label class="form-label required-field">Nome</label>
                            @Html.TextBoxFor(m => m.Usuario.Name,
                                     new
                                     {
                                         @class = $"form-control {(@ViewData.ModelState["Usuario.Name"]?.Errors.Count > 0 ? "is-invalid" : "")}",
                                         placeholder = "Nome do usuário",
                                         required = "required"
                                     })
                            <span class="text-danger">@Html.ValidationMessageFor(x => x.Usuario.Name)</span>
                        </div>

                        <!-- Email -->
                        <div class="mb-3">
                            <label class="form-label required-field">E-mail</label>
                            @Html.TextBoxFor(m => m.Usuario.Email,
                                     new
                                     {
                                         @class = $"form-control {(@ViewData.ModelState["Usuario.Email"]?.Errors.Count > 0 ? "is-invalid" : "")}",
                                         placeholder = "Email",
                                         required = "required"
                                     })
                            <span class="text-danger">@Html.ValidationMessageFor(x => x.Usuario.Email)</span>
                        </div>

                        <!-- Usuário -->
                        <div class="mb-3">
                            <label class="form-label required-field">Usuário</label>
                            @Html.TextBoxFor(m => m.Usuario.Login,
                                     new
                                     {
                                         @class = $"form-control {(@ViewData.ModelState["Usuario.Login"]?.Errors.Count > 0 ? "is-invalid" : "")}",
                                         placeholder = "Login",
                                         required = "required"
                                     })
                            <span class="text-danger">@Html.ValidationMessageFor(x => x.Usuario.Login)</span>
                        </div>

                        <!-- Possui Quadra? -->
                        <div class="mb-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <label class="form-label mb-0" for="quadraSwitch">Possui Quadra?</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="quadraSwitch"
                                    @(Model.Quadra?.DS_Endereco != null ? "checked" : "")>
                                </div>
                            </div>
                        </div>

                        <!-- Campos da Quadra -->
                        <div class="collapse mb-2 @(Model.Quadra?.DS_Endereco != null ? "show" : "")" id="quadraFields">
                            <div class="mb-2">
                                <label class="form-label quadra-required">CEP</label>
                                <div class="input-group">
                                    <input type="text" id="cep" class="form-control" placeholder="Digite o CEP" maxlength="9" onkeyup="formatarCEP(this)" />
                                </div>
                                <small class="text-muted">Digite o CEP para autopreencher o endereço</small>
                            </div>

                            <div class="mb-3">
                                <label class="form-label quadra-required">Endereço da Quadra</label>
                                @Html.TextBoxFor(m => m.Quadra.DS_Endereco,
                                         new
                                         {
                                             @class = $"form-control {(@ViewData.ModelState["Quadra.DS_Endereco"]?.Errors.Count > 0 ? "is-invalid" : "")}",
                                             placeholder = "Endereço",
                                             id = "Quadra_DS_Endereco"
                                         })
                                @Html.ValidationMessageFor(x => x.Quadra.DS_Endereco)
                            </div>

                            <div class="mb-3">
                                <label class="form-label quadra-required">Nome da Quadra</label>
                                @Html.TextBoxFor(m => m.Quadra.NM_Quadra,
                                         new
                                         {
                                             @class = $"form-control {(@ViewData.ModelState["Quadra.NM_Quadra"]?.Errors.Count > 0 ? "is-invalid" : "")}",
                                             placeholder = "Nome da Quadra",
                                             id = "Quadra_NM_Quadra"
                                         })
                                @Html.ValidationMessageFor(x => x.Quadra.NM_Quadra)
                                @Html.HiddenFor(m => m.Quadra.id_Time)
                                @Html.HiddenFor(m => m.Quadra.Id)
                            </div>
                        </div>

                        <!-- Botões -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="btn-group">
                                    <a class="btn btn-outline" asp-action="Index" asp-controller="MeuPerfil"> Voltar </a>
                                    <button type="submit" class="btn btn-editar"> Editar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const quadraSwitch = document.getElementById('quadraSwitch');
        const quadraFields = document.getElementById('quadraFields');
        if (quadraSwitch && quadraFields) {
            const quadraInputs = quadraFields.querySelectorAll('input[type="text"]');
            const collapseQuadra = new bootstrap.Collapse(quadraFields, {
                toggle: false
            });

            function atualizarObrigatoriedade() {
                if (quadraSwitch.checked) {
                    quadraInputs.forEach(input => input.setAttribute('required', 'required'));
                    document.querySelectorAll('.quadra-required').forEach(label => {
                        label.classList.add('required-field');
                    });
                } else {
                    quadraInputs.forEach(input => input.removeAttribute('required'));
                    document.querySelectorAll('.quadra-required').forEach(label => {
                        label.classList.remove('required-field');
                    });
                }
            }

            quadraSwitch.addEventListener('change', function () {
                if (quadraSwitch.checked) {
                    collapseQuadra.show();
                } else {
                    collapseQuadra.hide();
                }
                atualizarObrigatoriedade();
            });

            atualizarObrigatoriedade();
        }

        const form = document.getElementById('cadastroForm');
        if (form) {
            form.addEventListener('submit', function (event) {
                if (typeof atualizarObrigatoriedade === 'function') {
                    atualizarObrigatoriedade();
                }

                form.querySelectorAll('input').forEach(input => {
                    const t = input.type;
                    if ((t === 'text' || t === 'email') && input.value) {
                        input.value = input.value.trim();
                    }
                });

                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        }

        const cepInput = document.getElementById('cep');
        if (cepInput) {
            cepInput.addEventListener('input', function () {
                const cep = this.value.replace("-", "");
                if (cep.length === 8) {
                    buscarCEPAutomatico(this);
                }
            });
        }
    });

    function formatarCEP(input) {
        let cep = input.value.replace(/\D/g, "");
        if (cep.length > 5) {
            cep = cep.substring(0, 5) + "-" + cep.substring(5, 8);
        }
        input.value = cep;
    }

    function buscarCEPAutomatico(cepInput) {
        let cep = cepInput.value.replace("-", "");
        if (cep.length !== 8) return;

        document.getElementById('Quadra_DS_Endereco').value = "Buscando...";

        fetch(`https://viacep.com.br/ws/${cep}/json/`)
            .then(response => response.json())
            .then(data => {
                if (data.erro) throw new Error("CEP não encontrado");

                document.getElementById('Quadra_DS_Endereco').value = data.logradouro || "";
                document.getElementById('Quadra_NM_Quadra').focus();
            })
            .catch(error => {
                console.error("Erro ao buscar CEP:", error);
                document.getElementById('Quadra_DS_Endereco').value = "";
            });
    }

            // Desaparecer automaticamente os alertas
    const alertSucesso = document.getElementById('alertSucesso');
    const alertErro = document.getElementById('alertErro');

    if (alertSucesso) {
        setTimeout(() => {
            alertSucesso.style.transition = "opacity 0.5s ease";
            alertSucesso.style.opacity = "0";
            setTimeout(() => {
                alertSucesso.style.display = "none";
            }, 500);
        }, 8000); // 8 segundos
    }

    if (alertErro) {
        setTimeout(() => {
            alertErro.style.transition = "opacity 0.5s ease";
            alertErro.style.opacity = "0";
            setTimeout(() => {
                alertErro.style.display = "none";
            }, 500);
        }, 15000); // 15 segundos
    }
</script>
