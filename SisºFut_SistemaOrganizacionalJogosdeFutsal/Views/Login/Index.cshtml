@model LoginModel

@{
    Layout = "_LayoutDeslogado";
    ViewData["Title"] = "Redefinir Senha";
}

@if (TempData["MensagemErro"] != null)
{
    <div class="alert alert-danger" role="alert">
        <button type="button" class="btn btn-danger btn-sm close-alert" data-bs-dismiss="alert" aria-label="Close">X</button>
        @TempData["MensagemErro"]
    </div>
}

@if (TempData["MensagemSucesso"] != null)
{
    <div class="alert alert-success" role="alert">
        <button type="button" class="btn btn-danger btn-sm close-alert" data-bs-dismiss="alert" aria-label="Close">X</button>
        @TempData["MensagemSucesso"]
    </div>
}


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<link rel="stylesheet" href="~/css/login.css" asp-append-version="true">



<div class="container-login">
    <form asp-controller="Login" asp-action="Entrar" method="post" class="form-card">
        <h1 style="font-weight: bold; margin-bottom: 30px; color: #37c3b4; text-align: center; font-family: 'Courier New', Courier, monospace;">Acesse </h1>

        <div class="col-mb-4 form-group">
            <input type="text" asp-for="Login" class="form-control floating-input @(ViewData.ModelState["Login"]?.Errors.Count > 0 ? "is-invalid" : "")" id="login" placeholder=" " autocomplete="username">
            <label for="login" class="floating-label">Usuário</label>
            <span class="field-validation-error">@Html.ValidationMessageFor(x => x.Login)</span>
        </div>

        <div class="col-mb-4 form-group">
            <input type="password" asp-for="Senha" class="form-control floating-input @(ViewData.ModelState["Senha"]?.Errors.Count > 0 ? "is-invalid" : "")" id="senha" placeholder=" " autocomplete="current-password">
            <label for="senha" class="floating-label">Senha</label>
            <span class="field-validation-error">@Html.ValidationMessageFor(x => x.Senha)</span>
        </div>

        <a asp-controller="Login" asp-action="RedefinirSenha" style="text-align: center; display: block; margin-top: 1rem; color: #37c3b4; text-decoration: underline;">
            Redefinir Senha
        </a>


        <div class="btn-container">
            <button type="submit" class="btn btn-login btn-entrar">Entrar</button>
            <a asp-controller="CadastroPublico" asp-action="Cadastro" class="btn btn-login btn-criar-conta">Criar conta</a>
            @* <a asp-controller="Login" asp-action="RedefinirSenha" class="btn btn-login btn-criar-conta">RedefinirSenha</a> *@
        </div>
    </form>
</div>

<script>
    function checkAutoFill() {
        document.querySelectorAll('.floating-input').forEach(input => {
            const isAutoFilled = input.matches(':-webkit-autofill') || (input.value && input.value.trim() !== '');
            if (isAutoFilled) {
                input.setAttribute('data-filled', 'true');
            } else {
                input.removeAttribute('data-filled');
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        checkAutoFill();

        const autoFillCheckInterval = setInterval(checkAutoFill, 100);
        setTimeout(() => clearInterval(autoFillCheckInterval), 3000);

        const inputs = document.querySelectorAll('.floating-input');

        inputs.forEach(input => {
            const value = input.value.trim();
            const hasError = input.classList.contains('is-invalid');

            // Se o campo está com erro (ex: usuário não encontrado), limpa e destaca
            if (hasError) {
                input.value = '';
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
                input.removeAttribute('data-filled');
            } else if (value !== '') {
                input.setAttribute('data-filled', 'true');
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
            }

            input.addEventListener('input', function () {
                if (this.value.trim() !== '') {
                    this.setAttribute('data-filled', 'true');
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.removeAttribute('data-filled');
                    this.classList.remove('is-valid');
                }
            });

            input.addEventListener('change', function () {
                if (this.value.trim() !== '') {
                    this.setAttribute('data-filled', 'true');
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.removeAttribute('data-filled');
                    this.classList.remove('is-valid');
                }
            });
        });

        document.querySelector('form').addEventListener('submit', function () {
            inputs.forEach(input => {
                const isEmpty = input.value.trim() === '';
                if (isEmpty) {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');
                    input.setAttribute('data-filled', 'true');
                } else {
                    input.classList.remove('is-invalid');
                    input.classList.add('is-valid');
                }
            });
        });
    });

    // Força o preenchimento correto da label flutuante e visual de autofill
    window.addEventListener('DOMContentLoaded', function () {
        const inputs = document.querySelectorAll('.floating-input');

        inputs.forEach(input => {
            const value = input.value.trim();
            const hasError = input.classList.contains('is-invalid');

            if (hasError) {
                input.value = '';
                input.removeAttribute('data-filled');
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
            } else if (value !== '') {
                input.setAttribute('data-filled', 'true');
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
            }

            input.addEventListener('input', function () {
                if (this.value.trim() !== '') {
                    this.setAttribute('data-filled', 'true');
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.removeAttribute('data-filled');
                    this.classList.remove('is-valid');
                }
            });
        });

        // Chrome autofill fix
        setTimeout(() => {
            document.querySelectorAll('.floating-input:-webkit-autofill').forEach(el => {
                el.setAttribute('data-filled', 'true');
                el.classList.add('is-valid');
            });
        }, 100);
    });
</script>