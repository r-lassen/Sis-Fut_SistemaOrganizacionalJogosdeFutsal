@model RedefinirSenhaModel

@{
    Layout = "_LayoutDeslogado";
    ViewData["Title"] = "Redefinir Senha";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet" />
<link rel="stylesheet" href="~/css/RedefinirSenha.css" asp-append-version="true" />

<div class="container-login">
    <div class="form-card">
        <form asp-controller="Login" asp-action="EnviarLinkParaRedefinirSenha" method="post" class="needs-validation" novalidate>
            <h1 class="form-title">Redefinir Senha</h1>

            <div class="form-group">
                <input asp-for="Login"
                       class="floating-input form-control @(ViewData.ModelState["Login"]?.Errors.Count > 0 ? "is-invalid" : "")"
                       placeholder=" " id="login" />
                <label for="login" class="floating-label">Usuário</label>
                <span class="invalid-feedback">
                    @Html.ValidationMessageFor(x => x.Login)
                </span>
            </div>

            <div class="form-group">
                <input asp-for="Email"
                       class="floating-input form-control @(ViewData.ModelState["Email"]?.Errors.Count > 0 ? "is-invalid" : "")"
                       placeholder=" " id="email" />
                <label for="email" class="floating-label">E-mail</label>
                <span class="invalid-feedback">
                    @Html.ValidationMessageFor(x => x.Email)
                </span>
            </div>

            <div class="btn-container">
                <button type="submit" class="btn btn-primary btn-redefinir">Redefinir Senha</button>

                <a asp-action="" asp-controller="Login" class="btn btn-secondary btn-redefinir">Voltar</a>
            </div>
        </form>
    </div>
</div>


<script>
    function checkAutoFill() {
        document.querySelectorAll('.floating-input').forEach(input => {
            const isAutoFilled = input.matches(':-webkit-autofill') || (input.value && input.value.trim() !== '');
            if (isAutoFilled) {
                input.setAttribute('data-filled', 'true');
            } else {
                input.removeAttribute('data-filled');
            }
        });
    }

    document.addEventListener('DOMContentLoaded', function () {
        checkAutoFill();

        const autoFillCheckInterval = setInterval(checkAutoFill, 100);
        setTimeout(() => clearInterval(autoFillCheckInterval), 3000);

        const inputs = document.querySelectorAll('.floating-input');

        inputs.forEach(input => {
            const value = input.value.trim();
            const hasError = input.classList.contains('is-invalid');

            if (hasError) {
                input.value = ''; // limpa o campo
                input.removeAttribute('data-filled');
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
            } else if (value !== '') {
                input.setAttribute('data-filled', 'true');
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
            }

            input.addEventListener('input', function () {
                if (this.value.trim() !== '') {
                    this.setAttribute('data-filled', 'true');
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.removeAttribute('data-filled');
                    this.classList.remove('is-valid');
                }
            });

            input.addEventListener('change', function () {
                if (this.value.trim() !== '') {
                    this.setAttribute('data-filled', 'true');
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.removeAttribute('data-filled');
                    this.classList.remove('is-valid');
                }
            });
        });

        document.querySelector('form').addEventListener('submit', function () {
            inputs.forEach(input => {
                const isEmpty = input.value.trim() === '';
                if (isEmpty) {
                    input.classList.add('is-invalid');
                    input.classList.remove('is-valid');
                    input.setAttribute('data-filled', 'true');
                } else {
                    input.classList.remove('is-invalid');
                    input.classList.add('is-valid');
                }
            });
        });
    });

    window.addEventListener('DOMContentLoaded', function () {
        const inputs = document.querySelectorAll('.floating-input');

        inputs.forEach(input => {
            const value = input.value.trim();
            const hasError = input.classList.contains('is-invalid');

            if (hasError) {
                input.value = ''; // limpa o campo
                input.removeAttribute('data-filled');
                input.classList.add('is-invalid');
                input.classList.remove('is-valid');
            } else if (value !== '') {
                input.setAttribute('data-filled', 'true');
                input.classList.remove('is-invalid');
                input.classList.add('is-valid');
            }

            input.addEventListener('input', function () {
                if (this.value.trim() !== '') {
                    this.setAttribute('data-filled', 'true');
                    this.classList.remove('is-invalid');
                    this.classList.add('is-valid');
                } else {
                    this.removeAttribute('data-filled');
                    this.classList.remove('is-valid');
                }
            });
        });

        setTimeout(() => {
            document.querySelectorAll('.floating-input:-webkit-autofill').forEach(el => {
                el.setAttribute('data-filled', 'true');
                el.classList.add('is-valid');
            });
        }, 100);
    });
</script>


