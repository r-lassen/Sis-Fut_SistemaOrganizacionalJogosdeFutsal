@using SisºFut_SistemaOrganizacionalJogosdeFutsal.Enums
@model CadastroModel

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<link rel="stylesheet" href="~/css/cadstro.css" asp-append-version="true">

@{
    Layout = "_LayoutDeslogado";
    ViewData["Title"] = "Cadastrar Times";
}


<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6">
            @if (TempData["MensagemErro"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show mx-2 mt-2 mb-3" role="alert">
                    @TempData["MensagemErro"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            @if (TempData["MensagemSucesso"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show mx-2 mt-2 mb-3" role="alert">
                    @TempData["MensagemSucesso"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <h1 class="form-title" style="font-weight: bold;">Cadastrar Time</h1>

            <div class="form-card">
                <form asp-controller="CadastroPublico" asp-action="Cadastro" method="post" enctype="multipart/form-data" id="cadastroForm">
                    <div class="form-body">


                        <!-- Logo do Time -->
                        <div class="mb-3">
                            <label for="foto" class="form-label required-field">Logo do Time</label>
                            <input type="file" asp-for="usuario.FotoArquivo"
                                   class="form-control @(ViewData.ModelState["usuario.FotoArquivo"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                   accept="image/*" required />
                            <div class="invalid-feedback">Por favor, selecione uma imagem para o time.</div>
                        </div>

                        <!-- Nome do Time -->
                        <div class="mb-3">
                            <label class="form-label required-field">Nome do Time</label>
                            <input type="text" asp-for="usuario.Name"
                                   class="form-control @(ViewData.ModelState["usuario.Name"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                   placeholder="Digite o nome" required />
                            <span class="text-danger">@Html.ValidationMessageFor(x => x.usuario.Name)</span>
                        </div>

                        <!-- Login e Email -->
                        <div class="row g-2 mb-3">
                            <div class="col-md-6">
                                <label class="form-label required-field">Usuário</label>
                                <input type="text"
                                       asp-for="usuario.Login"
                                       class="form-control @(ViewData.ModelState["usuario.Login"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                       placeholder="Usuário"
                                       required />
                                <span class="invalid-feedback d-block">
                                    @Html.ValidationMessageFor(x => x.usuario.Login)
                                </span>
                            </div>

                            <div class="col-md-6">
                                <label class="form-label required-field">E-mail</label>
                                <input type="email"
                                       asp-for="usuario.Email"
                                       class="form-control @(ViewData.ModelState["usuario.Email"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                       placeholder="Digite o email"
                                       required />
                                <span class="invalid-feedback d-block">
                                    @Html.ValidationMessageFor(x => x.usuario.Email)
                                </span>
                            </div>
                        </div>

                        <!-- Possui Quadra? -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <label class="form-label mb-0" for="quadraSwitch">Possui Quadra?</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="quadraSwitch" data-bs-toggle="collapse" data-bs-target="#quadraFields" aria-checked="false">
                                </div>
                            </div>
                        </div>

                        <!-- Campos da Quadra (condicional) -->
                        <div class="collapse mb-3" id="quadraFields">
                            <!-- Campo CEP -->
                            <div class="mb-3">
                                <label class="form-label quadra-required">CEP</label>
                                <div class="input-group">
                                    <input type="text" id="cep" class="form-control" placeholder="Digite o CEP"
                                           maxlength="9" onkeyup="formatarCEP(this)" />
                                </div>
                                <small class="text-muted">Digite o CEP para autopreencher o endereço</small>
                            </div>

                            <!-- Campos de Endereço -->
                            <div class="mb-3">
                                <label class="form-label quadra-required">Endereço</label>
                                <input type="text" asp-for="quadras.DS_Endereco"
                                       id="endereco"
                                       class="form-control @(ViewData.ModelState["quadras.DS_Endereco"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                       placeholder="Digite o endereço da Quadra" />
                                @Html.ValidationMessageFor(x => x.quadras.DS_Endereco)
                            </div>

                            <div class="mb-3">
                                <label class="form-label quadra-required">Nome da Quadra</label>
                                <input type="text" asp-for="quadras.NM_Quadra"
                                       id="nomeQuadra"
                                       class="form-control @(ViewData.ModelState["quadras.NM_Quadra"]?.Errors.Count > 0 ? "is-invalid" : "")"
                                       placeholder="Digite o nome da Quadra" />
                                @Html.ValidationMessageFor(x => x.quadras.NM_Quadra)
                            </div>
                        </div>

                        <input type="hidden" asp-for="usuario.Perfil" value="@PerfilEnum.Padrao" />

                        <!-- Senha -->
                        <div class="mb-4 position-relative">
                            <label class="form-label required-field" for="usuario_Senha">Senha</label>
                            <div class="position-relative">
                                <input type="password" asp-for="usuario.Senha" id="usuario_Senha"
                                       class="form-control pe-5" placeholder="Digite a Senha" required />
                                <i id="toggleSenha" class="bi bi-eye position-absolute text-muted d-none"
                                   style="top: 50%; right: 40px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                            </div>

                            @Html.ValidationMessageFor(x => x.usuario.Senha, "", new { @class = "text-danger small mt-1 d-block" })

                            <small id="capsWarning" class="text-warning d-none mt-1 d-block">Caps Lock está ativado!</small>
                            <small id="senhaAviso" class="text-danger d-none mt-1 d-block">A senha deve ter no mínimo 6 caracteres, sem espaços ou caracteres especiais.</small>

                            <div id="senhaForca" class="mt-2">
                                <div class="progress" style="height: 6px;">
                                    <div id="barraForca" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Confirmação de Senha -->
                        <div class="mb-4 position-relative">
                            <label class="form-label required-field" for="confirmacaoSenha">Confirmação de Senha</label>
                            <input type="password" id="confirmacaoSenha" class="form-control pe-5" placeholder="Confirme a Senha" required />
                            <i id="toggleConfirmacao" class="bi bi-eye position-absolute text-muted d-none"
                               style="top: 75%; right: 40px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                        </div>

                        <small id="feedbackConfirmacao" class="text-danger d-none mt-1">As senhas não coincidem.</small>

                        <!-- Botões -->
                        <div class="row mt-4">
                            <div class="col-12">
                                <div class="btn-group">
                                    <!-- Botão Voltar -->
                                    <a class="btn btn-outline" asp-action="Index" asp-controller="Usuario"> Voltar </a>

                                    <!-- Botão Cadastrar -->
                                    <button type="submit" class="btn btn-cadastrar"> Cadastrar </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Validação de confirmação de senha
        const senha = document.getElementById('usuario_Senha');
        const confirmacaoSenha = document.getElementById('confirmacaoSenha');
        const feedbackConfirmacao = document.getElementById('feedbackConfirmacao');

        if (senha && confirmacaoSenha) {
            function validarSenha() {
                if (senha.value !== confirmacaoSenha.value) {
                    confirmacaoSenha.setCustomValidity("As senhas não coincidem");
                    confirmacaoSenha.classList.add('is-invalid');
                    feedbackConfirmacao.classList.remove('d-none');
                } else {
                    confirmacaoSenha.setCustomValidity("");
                    confirmacaoSenha.classList.remove('is-invalid');
                    feedbackConfirmacao.classList.add('d-none');
                }
            }

            senha.addEventListener('change', validarSenha);
            confirmacaoSenha.addEventListener('keyup', validarSenha);
        }

        // Regras extras para senha
        if (senha) {
            const capsWarning = document.getElementById('capsWarning');
            const senhaAviso = document.getElementById('senhaAviso');
            const barraForca = document.getElementById('barraForca');

            function verificarCapsLock(e) {
                const caps = e.getModifierState && e.getModifierState('CapsLock');
                capsWarning.classList.toggle('d-none', !caps);
            }

            function validarConteudoSenha() {
                const valor = senha.value;
                const regex = /^[A-Za-z0-9]{6,}$/;

                if (!regex.test(valor)) {
                    senha.setCustomValidity("Senha inválida.");
                    senha.classList.add('is-invalid');
                    senhaAviso.classList.remove('d-none');
                } else {
                    senha.setCustomValidity("");
                    senha.classList.remove('is-invalid');
                    senhaAviso.classList.add('d-none');
                }

                // Medidor de força
                let forca = 0;
                if (valor.length >= 6) forca += 1;
                if (/[A-Z]/.test(valor)) forca += 1;
                if (/[0-9]/.test(valor)) forca += 1;

                let largura = (forca / 3) * 100;
                barraForca.style.width = `${largura}%`;

                barraForca.className = 'progress-bar';
                if (forca === 1) barraForca.classList.add('bg-danger');
                else if (forca === 2) barraForca.classList.add('bg-warning');
                else if (forca === 3) barraForca.classList.add('bg-success');
            }

            senha.addEventListener('input', validarConteudoSenha);
            senha.addEventListener('keyup', verificarCapsLock);
        }

        // Controle do switch da quadra e indicadores de campo obrigatório
        const quadraSwitch = document.getElementById('quadraSwitch');
        const quadraFields = document.getElementById('quadraFields');
        if (quadraSwitch && quadraFields) {
            const quadraInputs = quadraFields.querySelectorAll('input[type="text"]');

            function atualizarObrigatoriedade() {
                if (quadraSwitch.checked) {
                    quadraInputs.forEach(input => input.setAttribute('required', 'required'));
                    document.querySelectorAll('.quadra-required').forEach(label => {
                        label.classList.add('required-field');
                    });
                } else {
                    quadraInputs.forEach(input => input.removeAttribute('required'));
                    document.querySelectorAll('.quadra-required').forEach(label => {
                        label.classList.remove('required-field');
                    });
                }
            }

            quadraSwitch.addEventListener('change', atualizarObrigatoriedade);

            quadraFields.addEventListener('show.bs.collapse', function () {
                quadraSwitch.checked = true;
                atualizarObrigatoriedade();
            });

            quadraFields.addEventListener('hide.bs.collapse', function () {
                quadraSwitch.checked = false;
                atualizarObrigatoriedade();
            });

            atualizarObrigatoriedade();
        }

        // Validação do formulário com TRIM automático
        const form = document.getElementById('cadastroForm');
        if (form) {
            form.addEventListener('submit', function (event) {
                if (typeof atualizarObrigatoriedade === 'function') {
                    atualizarObrigatoriedade();
                }

                form.querySelectorAll('input').forEach(input => {
                    const t = input.type;
                    if ((t === 'text' || t === 'email' || t === 'password') && input.value) {
                        input.value = input.value.trim();
                    }
                });

                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        }

        // Busca automática por CEP
        const cepInput = document.getElementById('cep');
        if (cepInput) {
            cepInput.addEventListener('input', function () {
                const cep = this.value.replace("-", "");
                if (cep.length === 8) {
                    buscarCEPAutomatico(this);
                }
            });
        }
    });

    // Mostrar/ocultar confirmação de senha e alternar ícone
    function configurarToggleSenha(inputId, toggleId) {
        const input = document.getElementById(inputId);
        const toggle = document.getElementById(toggleId);

        if (input && toggle) {
            // Alterna tipo de input e ícone
            toggle.addEventListener('click', function () {
                const tipoAtual = input.getAttribute('type');
                input.setAttribute('type', tipoAtual === 'password' ? 'text' : 'password');
                toggle.classList.toggle('bi-eye');
                toggle.classList.toggle('bi-eye-slash');
            });

            // Mostra/esconde o ícone dependendo do conteúdo
            input.addEventListener('input', function () {
                if (input.value.trim().length > 0) {
                    toggle.classList.remove('d-none');
                } else {
                    toggle.classList.add('d-none');
                    input.setAttribute('type', 'password');
                    toggle.classList.remove('bi-eye-slash');
                    toggle.classList.add('bi-eye');
                }
            });
        }
    }

    // Aplicar aos campos de senha e confirmação
    configurarToggleSenha('usuario_Senha', 'toggleSenha');
    configurarToggleSenha('confirmacaoSenha', 'toggleConfirmacao');


    // Formatador de CEP
    function formatarCEP(input) {
        let cep = input.value.replace(/\D/g, "");
        if (cep.length > 5) {
            cep = cep.substring(0, 5) + "-" + cep.substring(5, 8);
        }
        input.value = cep;

        if (cep.replace("-", "").length === 8) {
            buscarCEPAutomatico(input);
        }
    }

    // Busca manual
    function buscarCEP() {
        const cepInput = document.getElementById('cep');
        let cep = cepInput.value.replace("-", "");

        if (cep.length !== 8) {
            alert("CEP inválido. Digite os 8 dígitos.");
            return;
        }

        document.getElementById('endereco').value = "Buscando...";

        fetch(`https://viacep.com.br/ws/${cep}/json/`)
            .then(response => response.json())
            .then(data => {
                if (data.erro) throw new Error("CEP não encontrado");

                document.getElementById('endereco').value = data.logradouro || "";
                document.getElementById('nomeQuadra').focus();
            })
            .catch(error => {
                alert(error.message);
                document.getElementById('endereco').value = "";
                cepInput.focus();
            })
            .finally(() => {
                const botao = document.getElementById('buscarCepBtn');
                if (botao) botao.disabled = false;
            });
    }

    // Busca automática
    function buscarCEPAutomatico(cepInput) {
        let cep = cepInput.value.replace("-", "");
        if (cep.length !== 8) return;

        document.getElementById('endereco').value = "Buscando...";

        fetch(`https://viacep.com.br/ws/${cep}/json/`)
            .then(response => response.json())
            .then(data => {
                if (data.erro) throw new Error("CEP não encontrado");

                document.getElementById('endereco').value = data.logradouro || "";
                document.getElementById('nomeQuadra').focus();
            })
            .catch(error => {
                console.error("Erro ao buscar CEP:", error);
                document.getElementById('endereco').value = "";
            })
            .finally(() => {
                const botao = document.getElementById('buscarCepBtn');
                if (botao) botao.disabled = false;
            });
    }

</script>