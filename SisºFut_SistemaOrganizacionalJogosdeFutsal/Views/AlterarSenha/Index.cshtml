@using SisºFut_SistemaOrganizacionalJogosdeFutsal.Enums
@model AlterarSenhaModel
@{
    ViewData["Title"] = "Alterar Senha";
}



<!-- SEÇÃO DE MENSAGENS DE ALERTA -->
@if (TempData["MensagemSucesso"] != null)
{
    <div id="alertSucesso" class="alert alert-success text-center" role="alert">
        @TempData["MensagemSucesso"]
    </div>
}

@if (TempData["MensagemErro"] != null)
{
    <div id="alertErro" class="alert alert-danger text-center" role="alert">
        @TempData["MensagemErro"]
    </div>
}


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<link rel="stylesheet" href="~/css/AlterarSenha.css" asp-append-version="true">



<h1 class="page-title">Alterar Senha</h1>

<div class="container-login">
    <div class="form-card">
        <form asp-controller="AlterarSenha" asp-action="Alterar" method="post" id="alterarSenhaForm">
            <!-- Senha Atual -->
            <div class="mb-4 position-relative">
                <label class="form-label required-field" for="senhaAtual">Senha Atual</label>
                <div class="position-relative">
                    <input type="password" asp-for="SenhaAtual" id="senhaAtual"
                           class="form-control pe-5 @(ViewData.ModelState["SenhaAtual"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Digite sua senha atual" required />
                    <i id="toggleSenhaAtual" class="bi bi-eye position-absolute text-muted d-none"
                       style="top: 50%; right: 45px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                </div>
                <span class="text-danger small mt-1 d-block">@Html.ValidationMessageFor(x => x.SenhaAtual)</span>
            </div>

            <!-- Nova Senha -->
            <div class="mb-4 position-relative">
                <label class="form-label required-field" for="novaSenha">Nova Senha</label>
                <div class="position-relative">
                    <input type="password" asp-for="NovaSenha" id="novaSenha"
                           class="form-control pe-5 @(ViewData.ModelState["NovaSenha"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Digite a nova senha" required />
                    <i id="toggleNovaSenha" class="bi bi-eye position-absolute text-muted d-none"
                       style="top: 50%; right:45px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                </div>
                <span class="text-danger small mt-1 d-block">@Html.ValidationMessageFor(x => x.NovaSenha)</span>

                <small id="capsWarning" class="text-warning d-none mt-1 d-block">Caps Lock está ativado!</small>
                <small id="senhaAviso" class="text-danger d-none mt-1 d-block">A senha deve ter no mínimo 6 caracteres, sem espaços ou caracteres especiais.</small>

                <div id="senhaForca" class="mt-2">
                    <div class="progress" style="height: 6px;">
                        <div id="barraForca" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                    </div>
                </div>
            </div>

            <!-- Confirmação de Nova Senha -->
            <div class="mb-4 position-relative">
                <label class="form-label required-field" for="confirmarSenha">Confirmar Nova Senha</label>
                <div class="position-relative">
                    <input type="password" asp-for="ConfirmarNovaSenha" id="confirmarSenha"
                           class="form-control pe-5 @(ViewData.ModelState["ConfirmarNovaSenha"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Confirme a nova senha" required />
                    <i id="toggleConfirmarSenha" class="bi bi-eye position-absolute text-muted d-none"
                       style="top: 50%; right: 45px; transform: translateY(-50%); cursor: pointer; z-index: 10;"></i>
                </div>
                <span class="text-danger small mt-1 d-block">@Html.ValidationMessageFor(x => x.ConfirmarNovaSenha)</span>
                <small id="feedbackConfirmacao" class="text-danger d-none mt-1">As senhas não coincidem.</small>
            </div>

            <!-- Botões -->
            <div class="row mt-4">
                <div class="col-12">
                    <div class="btn-group">
                        <!-- Botão Voltar -->
                        <a class="btn btn-outline-custom" asp-action="Index" asp-controller="MeuPerfil">
                            Voltar
                        </a>

                        <!-- Botão Alterar -->
                        <button type="submit" class="btn btn-primary-custom">
                            Alterar Senha
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Configura toggles para mostrar/ocultar senha
        configurarToggleSenha('senhaAtual', 'toggleSenhaAtual');
        configurarToggleSenha('novaSenha', 'toggleNovaSenha');
        configurarToggleSenha('confirmarSenha', 'toggleConfirmarSenha');

        // Validação de confirmação de senha
        const novaSenha = document.getElementById('novaSenha');
        const confirmarSenha = document.getElementById('confirmarSenha');
        const feedbackConfirmacao = document.getElementById('feedbackConfirmacao');

        if (novaSenha && confirmarSenha) {
            function validarSenha() {
                if (novaSenha.value !== confirmarSenha.value) {
                    confirmarSenha.setCustomValidity("As senhas não coincidem");
                    confirmarSenha.classList.add('is-invalid');
                    feedbackConfirmacao.classList.remove('d-none');
                } else {
                    confirmarSenha.setCustomValidity("");
                    confirmarSenha.classList.remove('is-invalid');
                    feedbackConfirmacao.classList.add('d-none');
                }
            }

            novaSenha.addEventListener('change', validarSenha);
            confirmarSenha.addEventListener('keyup', validarSenha);
        }

        // Regras extras para nova senha
        if (novaSenha) {
            const capsWarning = document.getElementById('capsWarning');
            const senhaAviso = document.getElementById('senhaAviso');
            const barraForca = document.getElementById('barraForca');

            function verificarCapsLock(e) {
                const caps = e.getModifierState && e.getModifierState('CapsLock');
                capsWarning.classList.toggle('d-none', !caps);
            }

            function validarConteudoSenha() {
                const valor = novaSenha.value;
                const regex = /^[A-Za-z0-9]{6,}$/;

                if (!regex.test(valor)) {
                    novaSenha.setCustomValidity("Senha inválida.");
                    novaSenha.classList.add('is-invalid');
                    senhaAviso.classList.remove('d-none');
                } else {
                    novaSenha.setCustomValidity("");
                    novaSenha.classList.remove('is-invalid');
                    senhaAviso.classList.add('d-none');
                }

                // Medidor de força
                let forca = 0;
                if (valor.length >= 6) forca += 1;
                if (/[A-Z]/.test(valor)) forca += 1;
                if (/[0-9]/.test(valor)) forca += 1;

                let largura = (forca / 3) * 100;
                barraForca.style.width = `${largura}%`;

                barraForca.className = 'progress-bar';
                if (forca === 1) barraForca.classList.add('bg-danger');
                else if (forca === 2) barraForca.classList.add('bg-warning');
                else if (forca === 3) barraForca.classList.add('bg-success');
            }

            novaSenha.addEventListener('input', validarConteudoSenha);
            novaSenha.addEventListener('keyup', verificarCapsLock);
        }

        // Validação do formulário com TRIM automático
        const form = document.getElementById('alterarSenhaForm');
        if (form) {
            form.addEventListener('submit', function (event) {
                form.querySelectorAll('input').forEach(input => {
                    if (input.type === 'password' && input.value) {
                        input.value = input.value.trim();
                    }
                });

                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();
                }
                form.classList.add('was-validated');
            }, false);
        }
    });

    // Mostrar/ocultar senha e alternar ícone
    function configurarToggleSenha(inputId, toggleId) {
        const input = document.getElementById(inputId);
        const toggle = document.getElementById(toggleId);

        if (input && toggle) {
            // Alterna tipo de input e ícone
            toggle.addEventListener('click', function () {
                const tipoAtual = input.getAttribute('type');
                input.setAttribute('type', tipoAtual === 'password' ? 'text' : 'password');
                toggle.classList.toggle('bi-eye');
                toggle.classList.toggle('bi-eye-slash');
            });

            // Mostra/esconde o ícone dependendo do conteúdo
            input.addEventListener('input', function () {
                if (input.value.trim().length > 0) {
                    toggle.classList.remove('d-none');
                } else {
                    toggle.classList.add('d-none');
                    input.setAttribute('type', 'password');
                    toggle.classList.remove('bi-eye-slash');
                    toggle.classList.add('bi-eye');
                }
            });
        }
    }


            // Desaparecer automaticamente os alertas
    const alertSucesso = document.getElementById('alertSucesso');
    const alertErro = document.getElementById('alertErro');

    if (alertSucesso) {
        setTimeout(() => {
            alertSucesso.style.transition = "opacity 0.5s ease";
            alertSucesso.style.opacity = "0";
            setTimeout(() => {
                alertSucesso.style.display = "none";
            }, 500);
        }, 8000); // 8 segundos
    }

    if (alertErro) {
        setTimeout(() => {
            alertErro.style.transition = "opacity 0.5s ease";
            alertErro.style.opacity = "0";
            setTimeout(() => {
                alertErro.style.display = "none";
            }, 500);
        }, 15000); // 15 segundos
    }
</script>