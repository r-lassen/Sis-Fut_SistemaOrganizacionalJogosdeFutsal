@model DefinirNovaSenhaModel
@{
    Layout = "_LayoutDeslogado";
    ViewData["Title"] = "Definir Nova Senha";
}

<!-- SEÇÃO DE MENSAGENS DE ALERTA -->
@if (TempData["MensagemSucesso"] != null)
{
    <div id="alertSucesso" class="alert alert-success text-center" role="alert">
        @TempData["MensagemSucesso"]
    </div>
}

@if (TempData["MensagemErro"] != null)
{
    <div id="alertErro" class="alert alert-danger text-center" role="alert">
        @TempData["MensagemErro"]
    </div>
}


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">

<link rel="stylesheet" href="~/css/DefinirNovaSenha.css" asp-append-version="true">



<div class="container-login">
    <form asp-action="SalvarNovaSenha" asp-controller="Login" method="post" class="form-card">
        <h1 style="font-weight: bold; margin-bottom: 30px; color: #37c3b4; text-align: center; font-family: 'Courier New', Courier, monospace;">Definir Nova Senha</h1>

        <input type="hidden" asp-for="Token" />

        <!-- Campo Nova Senha -->
        <div class="form-group password-container">
            <div class="position-relative">
                <input type="password" asp-for="NovaSenha" id="novaSenha"
                       class="form-control floating-input pe-5"
                       placeholder=" " required />
                <label for="novaSenha" class="floating-label required-field">Nova Senha</label>
                <i id="toggleNovaSenha" class="bi bi-eye password-toggle-icon d-none"></i>
            </div>
            <span class="field-validation-error">@Html.ValidationMessageFor(x => x.NovaSenha)</span>

            <small id="capsWarning" class="password-feedback invalid d-none">
                <i class="bi bi-capslock-fill"></i> Caps Lock está ativado!
            </small>
            <small id="senhaAviso" class="password-feedback invalid d-none">
                A senha deve ter no mínimo 6 caracteres, sem espaços ou caracteres especiais.
            </small>

            <div id="senhaForca" class="mt-2">
                <div class="progress" style="height: 6px;">
                    <div id="barraForca" class="progress-bar" role="progressbar" style="width: 0%;"></div>
                </div>
            </div>
        </div>

        <!-- Campo Confirmar Senha -->
        <div class="form-group password-container">
            <input type="password" asp-for="ConfirmarNovaSenha" id="confirmarSenha"
                   class="form-control floating-input pe-5"
                   placeholder=" " required />
            <label for="confirmarSenha" class="floating-label required-field">Confirmar Nova Senha</label>
            <i id="toggleConfirmarSenha" class="bi bi-eye password-toggle-icon d-none"></i>

            <span class="field-validation-error">@Html.ValidationMessageFor(x => x.ConfirmarNovaSenha)</span>

            <small id="capsWarningConfirmar" class="password-feedback invalid d-none">
                <i class="bi bi-capslock-fill"></i> Caps Lock está ativado!
            </small>
        </div>

        <small id="feedbackConfirmacao" class="password-feedback invalid d-none">
            <i class="bi bi-exclamation-triangle-fill"></i> As senhas não coincidem.
        </small>

        <div class="btn-container">
            <button type="submit" class="btn btn-login btn-entrar">
                <i class=" me-2"></i>Salvar Nova Senha
            </button>
        </div>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const novaSenha = document.getElementById('novaSenha');
        const confirmarSenha = document.getElementById('confirmarSenha');
        const toggleNovaSenha = document.getElementById('toggleNovaSenha');
        const toggleConfirmarSenha = document.getElementById('toggleConfirmarSenha');
        const capsWarning = document.getElementById('capsWarning');
        const capsWarningConfirmar = document.getElementById('capsWarningConfirmar');
        const senhaAviso = document.getElementById('senhaAviso');
        const feedbackConfirmacao = document.getElementById('feedbackConfirmacao');
        const barraForca = document.getElementById('barraForca');

        configurarToggleSenha('novaSenha', 'toggleNovaSenha');
        configurarToggleSenha('confirmarSenha', 'toggleConfirmarSenha');

        function validarConfirmacaoSenha() {
            if (novaSenha.value !== confirmarSenha.value) {
                confirmarSenha.setCustomValidity("As senhas não coincidem");
                confirmarSenha.classList.add('is-invalid');
                feedbackConfirmacao.classList.remove('d-none');
            } else {
                confirmarSenha.setCustomValidity("");
                confirmarSenha.classList.remove('is-invalid');
                feedbackConfirmacao.classList.add('d-none');
            }
        }

        function validarConteudoSenha() {
            const valor = novaSenha.value;
            const regex = /^[A-Za-z0-9]{6,}$/;

            if (!regex.test(valor)) {
                novaSenha.setCustomValidity("Senha inválida");
                novaSenha.classList.add('is-invalid');
                senhaAviso.classList.remove('d-none');
            } else {
                novaSenha.setCustomValidity("");
                novaSenha.classList.remove('is-invalid');
                senhaAviso.classList.add('d-none');
            }

            atualizarBarraForca(valor);
        }

        function atualizarBarraForca(senha) {
            let forca = 0;
            if (senha.length >= 6) forca += 1;
            if (/[A-Z]/.test(senha)) forca += 1;
            if (/[0-9]/.test(senha)) forca += 1;

            let largura = (forca / 3) * 100;
            barraForca.style.width = `${largura}%`;

            barraForca.className = 'progress-bar';
            if (forca === 1) barraForca.classList.add('bg-danger');
            else if (forca === 2) barraForca.classList.add('bg-warning');
            else if (forca === 3) barraForca.classList.add('bg-success');
        }

        function verificarCapsLock(e, avisoElemento) {
            const caps = e.getModifierState && e.getModifierState('CapsLock');
            avisoElemento.classList.toggle('d-none', !caps);
        }

        novaSenha.addEventListener('input', validarConteudoSenha);
        novaSenha.addEventListener('keyup', e => verificarCapsLock(e, capsWarning));
        novaSenha.addEventListener('focus', e => verificarCapsLock(e, capsWarning));
        novaSenha.addEventListener('blur', () => capsWarning.classList.add('d-none'));

        confirmarSenha.addEventListener('input', validarConfirmacaoSenha);
        novaSenha.addEventListener('change', validarConfirmacaoSenha);

        confirmarSenha.addEventListener('keyup', e => verificarCapsLock(e, capsWarningConfirmar));
        confirmarSenha.addEventListener('focus', e => verificarCapsLock(e, capsWarningConfirmar));
        confirmarSenha.addEventListener('blur', () => capsWarningConfirmar.classList.add('d-none'));

        function configurarToggleSenha(inputId, toggleId) {
            const input = document.getElementById(inputId);
            const toggle = document.getElementById(toggleId);
            configurarExibicaoToggle(input, toggle);

            if (input && toggle) {
                toggle.addEventListener('click', function () {
                    const tipoAtual = input.getAttribute('type');
                    input.setAttribute('type', tipoAtual === 'password' ? 'text' : 'password');
                    toggle.classList.toggle('bi-eye');
                    toggle.classList.toggle('bi-eye-slash');
                });

                if (input.value.trim().length > 0) {
                    input.setAttribute('data-filled', 'true');
                    input.dispatchEvent(new Event('input'));
                }
            }
        }

        function configurarFloatingLabels() {
            document.querySelectorAll('.floating-input').forEach(input => {
                if (input.value.trim() !== '') {
                    input.setAttribute('data-filled', 'true');
                }

                input.addEventListener('input', function () {
                    if (this.value.trim() !== '') {
                        this.setAttribute('data-filled', 'true');
                    } else {
                        this.removeAttribute('data-filled');
                    }
                });
            });
        }

        configurarFloatingLabels();
    });

    function configurarExibicaoToggle(input, toggle) {
        input.addEventListener('input', function () {
            if (this.value.trim().length > 0) {
                toggle.classList.remove('d-none');
            } else {
                toggle.classList.add('d-none');
                input.setAttribute('type', 'password');
                toggle.classList.add('bi-eye');
                toggle.classList.remove('bi-eye-slash');
            }
        });
    }

            // Desaparecer automaticamente os alertas
    const alertSucesso = document.getElementById('alertSucesso');
    const alertErro = document.getElementById('alertErro');

    if (alertSucesso) {
        setTimeout(() => {
            alertSucesso.style.transition = "opacity 0.5s ease";
            alertSucesso.style.opacity = "0";
            setTimeout(() => {
                alertSucesso.style.display = "none";
            }, 500);
        }, 8000); // 8 segundos
    }

    if (alertErro) {
        setTimeout(() => {
            alertErro.style.transition = "opacity 0.5s ease";
            alertErro.style.opacity = "0";
            setTimeout(() => {
                alertErro.style.display = "none";
            }, 500);
        }, 15000); // 15 segundos
    }
</script>
